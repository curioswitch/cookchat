syntax = "proto3";

package frontendapi;

import "buf/validate/validate.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/curioswitch/cookchat/frontend/api/go;frontendapi";

// The content of a chat message.
message ChatContent {
  oneof payload {
    // A text message.
    string message = 1;

    // An audio message.
    bytes audio = 2;
  }
}

// A request to send in a chat.
message ChatRequest {
  // The content of the chat message.
  ChatContent content = 1;

  // The recipe to chat about.
  oneof recipe {
    // Free-form text of the recipe.
    string recipe_text = 2;

    // The ID of a cookchat recipe.
    string recipe_id = 3;
  }
}

// A response in a chat.
message ChatResponse {
  // The content of the chat message.
  ChatContent content = 1;
}

// A chat service.
service ChatService {
  // Chat with a stream of messages.
  rpc Chat(stream ChatRequest) returns (stream ChatResponse);
}

enum Language {
  // Unknown language.
  LANGUAGE_UNSPECIFIED = 0;
  // English.
  LANGUAGE_ENGLISH = 1;
  // Japanese.
  LANGUAGE_JAPANESE = 2;
}

enum RecipeGenre {
  RECIPE_GENRE_UNSPECIFIED = 0;
  RECIPE_GENRE_JAPANESE = 1;
  RECIPE_GENRE_CHINESE = 2;
  RECIPE_GENRE_WESTERN = 3;
  RECIPE_GENRE_KOREAN = 4;
  RECIPE_GENRE_ITALIAN = 5;
  RECIPE_GENRE_ETHNIC = 6;
}

// The source of a recipe.
enum RecipeSource {
  // Unknown source.
  RECIPE_SOURCE_UNSPECIFIED = 0;
  // Recipe from cookpad.
  RECIPE_SOURCE_COOKPAD = 1;
}

// An ingredient in a recipe.
message RecipeIngredient {
  // The name of the ingredient.
  string name = 1;
  // The quantity of the ingredient as free-form text.
  string quantity = 2;
}

// A step in a recipe.
message RecipeStep {
  // The description of the step.
  string description = 1;
  // An image for the step.
  string image_url = 2;
}

// A section of ingredients in a recipe.
message IngredientSection {
  // The title of the ingredient section.
  string title = 1;
  // The ingredients in the section.
  repeated RecipeIngredient ingredients = 2;
}

// Full details of a recipe.
message Recipe {
  // The unique identifier of the recipe within cookchat.
  string id = 1;

  // The source of the recipe.
  RecipeSource source = 2;

  // The title of the recipe.
  string title = 3;

  // The URL for the main image of the recipe.
  string image_url = 4;

  // The description of the recipe.
  string description = 5;

  // The main ingredients of the recipe.
  repeated RecipeIngredient ingredients = 6;

  // Additional ingredients grouped into sections.
  repeated IngredientSection additional_ingredients = 7;

  // The steps to prepare the recipe.
  repeated RecipeStep steps = 8;

  // Additional notes or comments about the recipe.
  string notes = 9;

  // The serving size of the recipe as free-form text.
  string serving_size = 10;

  // The language of the recipe.
  Language language = 11;
}

// A request for FrontendService.GetRecipe.
message GetRecipeRequest {
  // The ID of the recipe to get.
  string recipe_id = 1;
}

// A response for FrontendService.GetRecipe.
message GetRecipeResponse {
  // The requested recipe.
  Recipe recipe = 1;

  // The LLM prompt used to interact with the recipe.
  // Only returned for users with debugging access.
  string llm_prompt = 2;

  // Whether the recipe is bookmarked by the user.
  bool is_bookmarked = 3;
}

// A token returned to retrieve a subsequent page of items.
message Pagination {
  string last_id = 1;
}

// A snippet of a recipe for list views.
message RecipeSnippet {
  // The ID of the recipe.
  string id = 1;

  // The title of the recipe.
  string title = 2;

  // The summary of the recipe.
  string summary = 3;

  // The image URL of the recipe.
  string image_url = 4;
}

// A request for FrontendService.ListRecipes.
message ListRecipesRequest {
  // A text query to filter by.
  string query = 1;

  // The pagination token for the next page of recipes.
  // If unset, the first page is returned.
  Pagination pagination = 2;
}

// A response for FrontendService.ListRecipes.
message ListRecipesResponse {
  // The recipes.
  repeated RecipeSnippet recipes = 1;

  // The pagination token for the next page of recipes.
  Pagination pagination = 2;
}

// A request to start a chat session.
message StartChatRequest {
  // The recipe to chat about.
  oneof recipe {
    // Free-form text of the recipe.
    string recipe_text = 2;

    // The ID of a cookchat recipe.
    string recipe_id = 3;
  }

  enum ModelProvider {
    // The default model.
    MODEL_PROVIDER_UNSPECIFIED = 0;

    // Google GenAI model.
    MODEL_PROVIDER_GOOGLE_GENAI = 1;

    // OpenAI model.
    MODEL_PROVIDER_OPENAI = 2;
  }
  // The model provider to use for the chat.
  ModelProvider model_provider = 4;

  // The prompt to use with the chat.
  // Only recognized for users with debugging access.
  string llm_prompt = 5;
}

// A response to start a chat session.
message StartChatResponse {
  // The ephemeral API key to use to start the chat.
  string chat_api_key = 1;

  // The chat model to use for the session.
  string chat_model = 2;

  // Instructions for the chat session.
  string chat_instructions = 3;

  // The message to send to start the voice chat.
  string start_message = 4;
}

message AddRecipeRequest {
  // The title of the recipe.
  string title = 1;

  // The main image of the recipe, as a data URL.
  string main_image_data_url = 2;

  // The description of the recipe.
  string description = 3;

  // The main ingredients of the recipe.
  repeated RecipeIngredient ingredients = 4;

  // Additional ingredients grouped into sections.
  repeated IngredientSection additional_ingredients = 5;

  message AddRecipeStep {
    // The description of the step.
    string description = 1;

    // An image for the step, as a data URL.
    string image_data_url = 2;
  }
  // The steps to prepare the recipe.
  repeated AddRecipeStep steps = 6;

  // The serving size of the recipe as free-form text.
  string serving_size = 7;

  // The language of the recipe.
  Language language = 8;
}

message AddRecipeResponse {
  // The ID of the newly added recipe.
  string recipe_id = 1;
}

// A request for FrontendService.GenerateRecipe.
message GenerateRecipeRequest {
  // The prompt to generate a recipe for.
  string prompt = 1;
}

// A response for FrontendService.GenerateRecipe.
message GenerateRecipeResponse {
  // A request to add a recipe, prepopulated with generated content.
  AddRecipeRequest add_recipe_request = 1;
}

// A request for FrontendService.GeneratePlan.
message GeneratePlanRequest {
  // The number of days to plan for.
  uint32 num_days = 1;

  // Ingredients to include in the plan.
  repeated string ingredients = 2;

  // Genres to prioritize during planning.
  repeated RecipeGenre genres = 3;

  // Recipe IDs to use as main dishes.
  repeated string recipe_ids = 4;
}

// A response for FrontendService.GeneratePlan.
message GeneratePlanResponse {}

// A group of steps within a plan that can be executed together.
message StepGroup {
  // The label of the group.
  string label = 1;

  // The actual steps.
  repeated RecipeStep steps = 2;

  // Useful note for the group.
  string note = 3;
}

// A snippet of a plan, without executiond details.
message PlanSnippet {
  // The date of the plan. The timestamp will begin on the date in UTC.
  google.protobuf.Timestamp date = 1 [(buf.validate.field).required = true];

  // The recipes for the plan.
  repeated RecipeSnippet recipes = 2;
}

message GetPlansRequest {}

message GetPlansResponse {
  // The users current plans.
  repeated PlanSnippet plans = 1;
}

// A cooking plan.
message Plan {
  // The date of the plan. The timestamp will begin on the date in UTC.
  google.protobuf.Timestamp date = 1 [(buf.validate.field).required = true];

  // The recipes for the plan.
  repeated RecipeSnippet recipes = 2;

  // The step groups for the plan.
  repeated StepGroup step_groups = 3;

  // A list of notes to help cook the plan.
  repeated string notes = 4;
}

// A request for FrontendService.GetPlan.
message GetPlanRequest {
  // The date of the plan. The timestamp will begin on the date in UTC.
  google.protobuf.Timestamp date = 1;
}

// A response for FrontendService.GetPlan.
message GetPlanResponse {
  Plan plan = 1 [(buf.validate.field).required = true];
}

// A request for FrontendService.AddBookmark.
message AddBookmarkRequest {
  // The ID of the recipe to add a bookmark for.
  string recipe_id = 1;
}

// A response for FrontendService.AddBookmark.
message AddBookmarkResponse {}

// A request for FrontendService.RemoveBookmark.
message RemoveBookmarkRequest {
  // The ID of the recipe to remove a bookmark for.
  string recipe_id = 1;
}

// A response for FrontendService.RemoveBookmark.
message RemoveBookmarkResponse {}

service FrontendService {
  // Get the recipe for a given recipe ID.
  rpc GetRecipe(GetRecipeRequest) returns (GetRecipeResponse);

  // Get the list of recipes.
  rpc ListRecipes(ListRecipesRequest) returns (ListRecipesResponse);

  // Start a chat session.
  rpc StartChat(StartChatRequest) returns (StartChatResponse);

  // Add a new recipe.
  rpc AddRecipe(AddRecipeRequest) returns (AddRecipeResponse);

  // Generate a recipe based on a prompt.
  rpc GenerateRecipe(GenerateRecipeRequest) returns (GenerateRecipeResponse);

  // Generate a scheduled recipe plan.
  rpc GeneratePlan(GeneratePlanRequest) returns (GeneratePlanResponse);

  // Get the plans for the user.
  rpc GetPlans(GetPlansRequest) returns (GetPlansResponse);

  // Get the details of a plan.
  rpc GetPlan(GetPlanRequest) returns (GetPlanResponse);

  // Add a bookmark for a recipe.
  rpc AddBookmark(AddBookmarkRequest) returns (AddBookmarkResponse);

  // Remove a bookmark for a recipe.
  rpc RemoveBookmark(RemoveBookmarkRequest) returns (RemoveBookmarkResponse);
}
