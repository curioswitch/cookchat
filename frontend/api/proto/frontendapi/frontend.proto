syntax = "proto3";

package frontendapi;

option go_package = "github.com/curioswitch/cookchat/frontend/api/go;frontendapi";

// The content of a chat message.
message ChatContent {
  oneof payload {
    // A text message.
    string message = 1;

    // An audio message.
    bytes audio = 2;
  }
}

// A request to send in a chat.
message ChatRequest {
  // The content of the chat message.
  ChatContent content = 1;

  // The recipe to chat about.
  oneof recipe {
    // Free-form text of the recipe.
    string recipe_text = 2;

    // The ID of a cookchat recipe.
    string recipe_id = 3;
  }
}

// A response in a chat.
message ChatResponse {
  // The content of the chat message.
  ChatContent content = 1;
}

// A chat service.
service ChatService {
  // Chat with a stream of messages.
  rpc Chat(stream ChatRequest) returns (stream ChatResponse);
}

enum Language {
  // Unknown language.
  LANGUAGE_UNSPECIFIED = 0;
  // English.
  LANGUAGE_ENGLISH = 1;
  // Japanese.
  LANGUAGE_JAPANESE = 2;
}

// The source of a recipe.
enum RecipeSource {
  // Unknown source.
  RECIPE_SOURCE_UNSPECIFIED = 0;
  // Recipe from cookpad.
  RECIPE_SOURCE_COOKPAD = 1;
}

// An ingredient in a recipe.
message RecipeIngredient {
  // The name of the ingredient.
  string name = 1;
  // The quantity of the ingredient as free-form text.
  string quantity = 2;
}

// A step in a recipe.
message RecipeStep {
  // The description of the step.
  string description = 1;
  // An image for the step.
  string image_url = 2;
}

// A section of ingredients in a recipe.
message IngredientSection {
  // The title of the ingredient section.
  string title = 1;
  // The ingredients in the section.
  repeated RecipeIngredient ingredients = 2;
}

// Full details of a recipe.
message Recipe {
  // The unique identifier of the recipe within cookchat.
  string id = 1;

  // The source of the recipe.
  RecipeSource source = 2;

  // The title of the recipe.
  string title = 3;

  // The URL for the main image of the recipe.
  string image_url = 4;

  // The description of the recipe.
  string description = 5;

  // The main ingredients of the recipe.
  repeated RecipeIngredient ingredients = 6;

  // Additional ingredients grouped into sections.
  repeated IngredientSection additional_ingredients = 7;

  // The steps to prepare the recipe.
  repeated RecipeStep steps = 8;

  // Additional notes or comments about the recipe.
  string notes = 9;

  // The serving size of the recipe as free-form text.
  string serving_size = 10;

  // The language of the recipe.
  Language language = 11;
}

// A request for FrontendService.GetRecipe.
message GetRecipeRequest {
  // The ID of the recipe to get.
  string recipe_id = 1;
}

// A response for FrontendService.GetRecipe.
message GetRecipeResponse {
  // The requested recipe.
  Recipe recipe = 1;
}

// A token returned to retrieve a subsequent page of items.
message Pagination {
  string last_id = 1;
}

// A snippet of a recipe for list views.
message RecipeSnippet {
  // The ID of the recipe.
  string id = 1;

  // The title of the recipe.
  string title = 2;

  // The summary of the recipe.
  string summary = 3;

  // The image URL of the recipe.
  string image_url = 4;
}

// A request for FrontendService.ListRecipes.
message ListRecipesRequest {
  // A text query to filter by.
  string query = 1;

  // The pagination token for the next page of recipes.
  // If unset, the first page is returned.
  Pagination pagination = 2;
}

// A response for FrontendService.ListRecipes.
message ListRecipesResponse {
  // The recipes.
  repeated RecipeSnippet recipes = 1;

  // The pagination token for the next page of recipes.
  Pagination pagination = 2;
}

// A request to start a chat session.
message StartChatRequest {
  // The recipe to chat about.
  oneof recipe {
    // Free-form text of the recipe.
    string recipe_text = 2;

    // The ID of a cookchat recipe.
    string recipe_id = 3;
  }

  enum ModelProvider {
    // The default model.
    MODEL_PROVIDER_UNSPECIFIED = 0;

    // Google GenAI model.
    MODEL_PROVIDER_GOOGLE_GENAI = 1;

    // OpenAI model.
    MODEL_PROVIDER_OPENAI = 2;
  }
  // The model provider to use for the chat.
  ModelProvider model_provider = 4;
}

// A response to start a chat session.
message StartChatResponse {
  // The ephemeral API key to use to start the chat.
  string chat_api_key = 1;

  // The chat model to use for the session.
  string chat_model = 2;

  // Instructions for the chat session.
  string chat_instructions = 3;
}

service FrontendService {
  // Get the recipe for a given recipe ID.
  rpc GetRecipe(GetRecipeRequest) returns (GetRecipeResponse);

  // Get the list of recipes.
  rpc ListRecipes(ListRecipesRequest) returns (ListRecipesResponse);

  // Start a chat session.
  rpc StartChat(StartChatRequest) returns (StartChatResponse);
}
