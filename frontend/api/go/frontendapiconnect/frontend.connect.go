// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: frontendapi/frontend.proto

package frontendapiconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	_go "github.com/curioswitch/cookchat/frontend/api/go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ChatServiceName is the fully-qualified name of the ChatService service.
	ChatServiceName = "frontendapi.ChatService"
	// FrontendServiceName is the fully-qualified name of the FrontendService service.
	FrontendServiceName = "frontendapi.FrontendService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ChatServiceChatProcedure is the fully-qualified name of the ChatService's Chat RPC.
	ChatServiceChatProcedure = "/frontendapi.ChatService/Chat"
	// FrontendServiceGetRecipeProcedure is the fully-qualified name of the FrontendService's GetRecipe
	// RPC.
	FrontendServiceGetRecipeProcedure = "/frontendapi.FrontendService/GetRecipe"
	// FrontendServiceListRecipesProcedure is the fully-qualified name of the FrontendService's
	// ListRecipes RPC.
	FrontendServiceListRecipesProcedure = "/frontendapi.FrontendService/ListRecipes"
	// FrontendServiceStartChatProcedure is the fully-qualified name of the FrontendService's StartChat
	// RPC.
	FrontendServiceStartChatProcedure = "/frontendapi.FrontendService/StartChat"
	// FrontendServiceAddRecipeProcedure is the fully-qualified name of the FrontendService's AddRecipe
	// RPC.
	FrontendServiceAddRecipeProcedure = "/frontendapi.FrontendService/AddRecipe"
	// FrontendServiceGenerateRecipeProcedure is the fully-qualified name of the FrontendService's
	// GenerateRecipe RPC.
	FrontendServiceGenerateRecipeProcedure = "/frontendapi.FrontendService/GenerateRecipe"
	// FrontendServiceGeneratePlanProcedure is the fully-qualified name of the FrontendService's
	// GeneratePlan RPC.
	FrontendServiceGeneratePlanProcedure = "/frontendapi.FrontendService/GeneratePlan"
	// FrontendServiceGetPlansProcedure is the fully-qualified name of the FrontendService's GetPlans
	// RPC.
	FrontendServiceGetPlansProcedure = "/frontendapi.FrontendService/GetPlans"
	// FrontendServiceGetPlanProcedure is the fully-qualified name of the FrontendService's GetPlan RPC.
	FrontendServiceGetPlanProcedure = "/frontendapi.FrontendService/GetPlan"
	// FrontendServiceAddBookmarkProcedure is the fully-qualified name of the FrontendService's
	// AddBookmark RPC.
	FrontendServiceAddBookmarkProcedure = "/frontendapi.FrontendService/AddBookmark"
	// FrontendServiceRemoveBookmarkProcedure is the fully-qualified name of the FrontendService's
	// RemoveBookmark RPC.
	FrontendServiceRemoveBookmarkProcedure = "/frontendapi.FrontendService/RemoveBookmark"
)

// ChatServiceClient is a client for the frontendapi.ChatService service.
type ChatServiceClient interface {
	// Chat with a stream of messages.
	Chat(context.Context) *connect.BidiStreamForClient[_go.ChatRequest, _go.ChatResponse]
}

// NewChatServiceClient constructs a client for the frontendapi.ChatService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewChatServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ChatServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	chatServiceMethods := _go.File_frontendapi_frontend_proto.Services().ByName("ChatService").Methods()
	return &chatServiceClient{
		chat: connect.NewClient[_go.ChatRequest, _go.ChatResponse](
			httpClient,
			baseURL+ChatServiceChatProcedure,
			connect.WithSchema(chatServiceMethods.ByName("Chat")),
			connect.WithClientOptions(opts...),
		),
	}
}

// chatServiceClient implements ChatServiceClient.
type chatServiceClient struct {
	chat *connect.Client[_go.ChatRequest, _go.ChatResponse]
}

// Chat calls frontendapi.ChatService.Chat.
func (c *chatServiceClient) Chat(ctx context.Context) *connect.BidiStreamForClient[_go.ChatRequest, _go.ChatResponse] {
	return c.chat.CallBidiStream(ctx)
}

// ChatServiceHandler is an implementation of the frontendapi.ChatService service.
type ChatServiceHandler interface {
	// Chat with a stream of messages.
	Chat(context.Context, *connect.BidiStream[_go.ChatRequest, _go.ChatResponse]) error
}

// NewChatServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewChatServiceHandler(svc ChatServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	chatServiceMethods := _go.File_frontendapi_frontend_proto.Services().ByName("ChatService").Methods()
	chatServiceChatHandler := connect.NewBidiStreamHandler(
		ChatServiceChatProcedure,
		svc.Chat,
		connect.WithSchema(chatServiceMethods.ByName("Chat")),
		connect.WithHandlerOptions(opts...),
	)
	return "/frontendapi.ChatService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ChatServiceChatProcedure:
			chatServiceChatHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedChatServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedChatServiceHandler struct{}

func (UnimplementedChatServiceHandler) Chat(context.Context, *connect.BidiStream[_go.ChatRequest, _go.ChatResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("frontendapi.ChatService.Chat is not implemented"))
}

// FrontendServiceClient is a client for the frontendapi.FrontendService service.
type FrontendServiceClient interface {
	// Get the recipe for a given recipe ID.
	GetRecipe(context.Context, *connect.Request[_go.GetRecipeRequest]) (*connect.Response[_go.GetRecipeResponse], error)
	// Get the list of recipes.
	ListRecipes(context.Context, *connect.Request[_go.ListRecipesRequest]) (*connect.Response[_go.ListRecipesResponse], error)
	// Start a chat session.
	StartChat(context.Context, *connect.Request[_go.StartChatRequest]) (*connect.Response[_go.StartChatResponse], error)
	// Add a new recipe.
	AddRecipe(context.Context, *connect.Request[_go.AddRecipeRequest]) (*connect.Response[_go.AddRecipeResponse], error)
	// Generate a recipe based on a prompt.
	GenerateRecipe(context.Context, *connect.Request[_go.GenerateRecipeRequest]) (*connect.Response[_go.GenerateRecipeResponse], error)
	// Generate a scheduled recipe plan.
	GeneratePlan(context.Context, *connect.Request[_go.GeneratePlanRequest]) (*connect.Response[_go.GeneratePlanResponse], error)
	// Get the plans for the user.
	GetPlans(context.Context, *connect.Request[_go.GetPlansRequest]) (*connect.Response[_go.GetPlansResponse], error)
	// Get the details of a plan.
	GetPlan(context.Context, *connect.Request[_go.GetPlanRequest]) (*connect.Response[_go.GetPlanResponse], error)
	// Add a bookmark for a recipe.
	AddBookmark(context.Context, *connect.Request[_go.AddBookmarkRequest]) (*connect.Response[_go.AddBookmarkResponse], error)
	// Remove a bookmark for a recipe.
	RemoveBookmark(context.Context, *connect.Request[_go.RemoveBookmarkRequest]) (*connect.Response[_go.RemoveBookmarkResponse], error)
}

// NewFrontendServiceClient constructs a client for the frontendapi.FrontendService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewFrontendServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) FrontendServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	frontendServiceMethods := _go.File_frontendapi_frontend_proto.Services().ByName("FrontendService").Methods()
	return &frontendServiceClient{
		getRecipe: connect.NewClient[_go.GetRecipeRequest, _go.GetRecipeResponse](
			httpClient,
			baseURL+FrontendServiceGetRecipeProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("GetRecipe")),
			connect.WithClientOptions(opts...),
		),
		listRecipes: connect.NewClient[_go.ListRecipesRequest, _go.ListRecipesResponse](
			httpClient,
			baseURL+FrontendServiceListRecipesProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("ListRecipes")),
			connect.WithClientOptions(opts...),
		),
		startChat: connect.NewClient[_go.StartChatRequest, _go.StartChatResponse](
			httpClient,
			baseURL+FrontendServiceStartChatProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("StartChat")),
			connect.WithClientOptions(opts...),
		),
		addRecipe: connect.NewClient[_go.AddRecipeRequest, _go.AddRecipeResponse](
			httpClient,
			baseURL+FrontendServiceAddRecipeProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("AddRecipe")),
			connect.WithClientOptions(opts...),
		),
		generateRecipe: connect.NewClient[_go.GenerateRecipeRequest, _go.GenerateRecipeResponse](
			httpClient,
			baseURL+FrontendServiceGenerateRecipeProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("GenerateRecipe")),
			connect.WithClientOptions(opts...),
		),
		generatePlan: connect.NewClient[_go.GeneratePlanRequest, _go.GeneratePlanResponse](
			httpClient,
			baseURL+FrontendServiceGeneratePlanProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("GeneratePlan")),
			connect.WithClientOptions(opts...),
		),
		getPlans: connect.NewClient[_go.GetPlansRequest, _go.GetPlansResponse](
			httpClient,
			baseURL+FrontendServiceGetPlansProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("GetPlans")),
			connect.WithClientOptions(opts...),
		),
		getPlan: connect.NewClient[_go.GetPlanRequest, _go.GetPlanResponse](
			httpClient,
			baseURL+FrontendServiceGetPlanProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("GetPlan")),
			connect.WithClientOptions(opts...),
		),
		addBookmark: connect.NewClient[_go.AddBookmarkRequest, _go.AddBookmarkResponse](
			httpClient,
			baseURL+FrontendServiceAddBookmarkProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("AddBookmark")),
			connect.WithClientOptions(opts...),
		),
		removeBookmark: connect.NewClient[_go.RemoveBookmarkRequest, _go.RemoveBookmarkResponse](
			httpClient,
			baseURL+FrontendServiceRemoveBookmarkProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("RemoveBookmark")),
			connect.WithClientOptions(opts...),
		),
	}
}

// frontendServiceClient implements FrontendServiceClient.
type frontendServiceClient struct {
	getRecipe      *connect.Client[_go.GetRecipeRequest, _go.GetRecipeResponse]
	listRecipes    *connect.Client[_go.ListRecipesRequest, _go.ListRecipesResponse]
	startChat      *connect.Client[_go.StartChatRequest, _go.StartChatResponse]
	addRecipe      *connect.Client[_go.AddRecipeRequest, _go.AddRecipeResponse]
	generateRecipe *connect.Client[_go.GenerateRecipeRequest, _go.GenerateRecipeResponse]
	generatePlan   *connect.Client[_go.GeneratePlanRequest, _go.GeneratePlanResponse]
	getPlans       *connect.Client[_go.GetPlansRequest, _go.GetPlansResponse]
	getPlan        *connect.Client[_go.GetPlanRequest, _go.GetPlanResponse]
	addBookmark    *connect.Client[_go.AddBookmarkRequest, _go.AddBookmarkResponse]
	removeBookmark *connect.Client[_go.RemoveBookmarkRequest, _go.RemoveBookmarkResponse]
}

// GetRecipe calls frontendapi.FrontendService.GetRecipe.
func (c *frontendServiceClient) GetRecipe(ctx context.Context, req *connect.Request[_go.GetRecipeRequest]) (*connect.Response[_go.GetRecipeResponse], error) {
	return c.getRecipe.CallUnary(ctx, req)
}

// ListRecipes calls frontendapi.FrontendService.ListRecipes.
func (c *frontendServiceClient) ListRecipes(ctx context.Context, req *connect.Request[_go.ListRecipesRequest]) (*connect.Response[_go.ListRecipesResponse], error) {
	return c.listRecipes.CallUnary(ctx, req)
}

// StartChat calls frontendapi.FrontendService.StartChat.
func (c *frontendServiceClient) StartChat(ctx context.Context, req *connect.Request[_go.StartChatRequest]) (*connect.Response[_go.StartChatResponse], error) {
	return c.startChat.CallUnary(ctx, req)
}

// AddRecipe calls frontendapi.FrontendService.AddRecipe.
func (c *frontendServiceClient) AddRecipe(ctx context.Context, req *connect.Request[_go.AddRecipeRequest]) (*connect.Response[_go.AddRecipeResponse], error) {
	return c.addRecipe.CallUnary(ctx, req)
}

// GenerateRecipe calls frontendapi.FrontendService.GenerateRecipe.
func (c *frontendServiceClient) GenerateRecipe(ctx context.Context, req *connect.Request[_go.GenerateRecipeRequest]) (*connect.Response[_go.GenerateRecipeResponse], error) {
	return c.generateRecipe.CallUnary(ctx, req)
}

// GeneratePlan calls frontendapi.FrontendService.GeneratePlan.
func (c *frontendServiceClient) GeneratePlan(ctx context.Context, req *connect.Request[_go.GeneratePlanRequest]) (*connect.Response[_go.GeneratePlanResponse], error) {
	return c.generatePlan.CallUnary(ctx, req)
}

// GetPlans calls frontendapi.FrontendService.GetPlans.
func (c *frontendServiceClient) GetPlans(ctx context.Context, req *connect.Request[_go.GetPlansRequest]) (*connect.Response[_go.GetPlansResponse], error) {
	return c.getPlans.CallUnary(ctx, req)
}

// GetPlan calls frontendapi.FrontendService.GetPlan.
func (c *frontendServiceClient) GetPlan(ctx context.Context, req *connect.Request[_go.GetPlanRequest]) (*connect.Response[_go.GetPlanResponse], error) {
	return c.getPlan.CallUnary(ctx, req)
}

// AddBookmark calls frontendapi.FrontendService.AddBookmark.
func (c *frontendServiceClient) AddBookmark(ctx context.Context, req *connect.Request[_go.AddBookmarkRequest]) (*connect.Response[_go.AddBookmarkResponse], error) {
	return c.addBookmark.CallUnary(ctx, req)
}

// RemoveBookmark calls frontendapi.FrontendService.RemoveBookmark.
func (c *frontendServiceClient) RemoveBookmark(ctx context.Context, req *connect.Request[_go.RemoveBookmarkRequest]) (*connect.Response[_go.RemoveBookmarkResponse], error) {
	return c.removeBookmark.CallUnary(ctx, req)
}

// FrontendServiceHandler is an implementation of the frontendapi.FrontendService service.
type FrontendServiceHandler interface {
	// Get the recipe for a given recipe ID.
	GetRecipe(context.Context, *connect.Request[_go.GetRecipeRequest]) (*connect.Response[_go.GetRecipeResponse], error)
	// Get the list of recipes.
	ListRecipes(context.Context, *connect.Request[_go.ListRecipesRequest]) (*connect.Response[_go.ListRecipesResponse], error)
	// Start a chat session.
	StartChat(context.Context, *connect.Request[_go.StartChatRequest]) (*connect.Response[_go.StartChatResponse], error)
	// Add a new recipe.
	AddRecipe(context.Context, *connect.Request[_go.AddRecipeRequest]) (*connect.Response[_go.AddRecipeResponse], error)
	// Generate a recipe based on a prompt.
	GenerateRecipe(context.Context, *connect.Request[_go.GenerateRecipeRequest]) (*connect.Response[_go.GenerateRecipeResponse], error)
	// Generate a scheduled recipe plan.
	GeneratePlan(context.Context, *connect.Request[_go.GeneratePlanRequest]) (*connect.Response[_go.GeneratePlanResponse], error)
	// Get the plans for the user.
	GetPlans(context.Context, *connect.Request[_go.GetPlansRequest]) (*connect.Response[_go.GetPlansResponse], error)
	// Get the details of a plan.
	GetPlan(context.Context, *connect.Request[_go.GetPlanRequest]) (*connect.Response[_go.GetPlanResponse], error)
	// Add a bookmark for a recipe.
	AddBookmark(context.Context, *connect.Request[_go.AddBookmarkRequest]) (*connect.Response[_go.AddBookmarkResponse], error)
	// Remove a bookmark for a recipe.
	RemoveBookmark(context.Context, *connect.Request[_go.RemoveBookmarkRequest]) (*connect.Response[_go.RemoveBookmarkResponse], error)
}

// NewFrontendServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewFrontendServiceHandler(svc FrontendServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	frontendServiceMethods := _go.File_frontendapi_frontend_proto.Services().ByName("FrontendService").Methods()
	frontendServiceGetRecipeHandler := connect.NewUnaryHandler(
		FrontendServiceGetRecipeProcedure,
		svc.GetRecipe,
		connect.WithSchema(frontendServiceMethods.ByName("GetRecipe")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceListRecipesHandler := connect.NewUnaryHandler(
		FrontendServiceListRecipesProcedure,
		svc.ListRecipes,
		connect.WithSchema(frontendServiceMethods.ByName("ListRecipes")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceStartChatHandler := connect.NewUnaryHandler(
		FrontendServiceStartChatProcedure,
		svc.StartChat,
		connect.WithSchema(frontendServiceMethods.ByName("StartChat")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceAddRecipeHandler := connect.NewUnaryHandler(
		FrontendServiceAddRecipeProcedure,
		svc.AddRecipe,
		connect.WithSchema(frontendServiceMethods.ByName("AddRecipe")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceGenerateRecipeHandler := connect.NewUnaryHandler(
		FrontendServiceGenerateRecipeProcedure,
		svc.GenerateRecipe,
		connect.WithSchema(frontendServiceMethods.ByName("GenerateRecipe")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceGeneratePlanHandler := connect.NewUnaryHandler(
		FrontendServiceGeneratePlanProcedure,
		svc.GeneratePlan,
		connect.WithSchema(frontendServiceMethods.ByName("GeneratePlan")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceGetPlansHandler := connect.NewUnaryHandler(
		FrontendServiceGetPlansProcedure,
		svc.GetPlans,
		connect.WithSchema(frontendServiceMethods.ByName("GetPlans")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceGetPlanHandler := connect.NewUnaryHandler(
		FrontendServiceGetPlanProcedure,
		svc.GetPlan,
		connect.WithSchema(frontendServiceMethods.ByName("GetPlan")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceAddBookmarkHandler := connect.NewUnaryHandler(
		FrontendServiceAddBookmarkProcedure,
		svc.AddBookmark,
		connect.WithSchema(frontendServiceMethods.ByName("AddBookmark")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceRemoveBookmarkHandler := connect.NewUnaryHandler(
		FrontendServiceRemoveBookmarkProcedure,
		svc.RemoveBookmark,
		connect.WithSchema(frontendServiceMethods.ByName("RemoveBookmark")),
		connect.WithHandlerOptions(opts...),
	)
	return "/frontendapi.FrontendService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case FrontendServiceGetRecipeProcedure:
			frontendServiceGetRecipeHandler.ServeHTTP(w, r)
		case FrontendServiceListRecipesProcedure:
			frontendServiceListRecipesHandler.ServeHTTP(w, r)
		case FrontendServiceStartChatProcedure:
			frontendServiceStartChatHandler.ServeHTTP(w, r)
		case FrontendServiceAddRecipeProcedure:
			frontendServiceAddRecipeHandler.ServeHTTP(w, r)
		case FrontendServiceGenerateRecipeProcedure:
			frontendServiceGenerateRecipeHandler.ServeHTTP(w, r)
		case FrontendServiceGeneratePlanProcedure:
			frontendServiceGeneratePlanHandler.ServeHTTP(w, r)
		case FrontendServiceGetPlansProcedure:
			frontendServiceGetPlansHandler.ServeHTTP(w, r)
		case FrontendServiceGetPlanProcedure:
			frontendServiceGetPlanHandler.ServeHTTP(w, r)
		case FrontendServiceAddBookmarkProcedure:
			frontendServiceAddBookmarkHandler.ServeHTTP(w, r)
		case FrontendServiceRemoveBookmarkProcedure:
			frontendServiceRemoveBookmarkHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedFrontendServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedFrontendServiceHandler struct{}

func (UnimplementedFrontendServiceHandler) GetRecipe(context.Context, *connect.Request[_go.GetRecipeRequest]) (*connect.Response[_go.GetRecipeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("frontendapi.FrontendService.GetRecipe is not implemented"))
}

func (UnimplementedFrontendServiceHandler) ListRecipes(context.Context, *connect.Request[_go.ListRecipesRequest]) (*connect.Response[_go.ListRecipesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("frontendapi.FrontendService.ListRecipes is not implemented"))
}

func (UnimplementedFrontendServiceHandler) StartChat(context.Context, *connect.Request[_go.StartChatRequest]) (*connect.Response[_go.StartChatResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("frontendapi.FrontendService.StartChat is not implemented"))
}

func (UnimplementedFrontendServiceHandler) AddRecipe(context.Context, *connect.Request[_go.AddRecipeRequest]) (*connect.Response[_go.AddRecipeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("frontendapi.FrontendService.AddRecipe is not implemented"))
}

func (UnimplementedFrontendServiceHandler) GenerateRecipe(context.Context, *connect.Request[_go.GenerateRecipeRequest]) (*connect.Response[_go.GenerateRecipeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("frontendapi.FrontendService.GenerateRecipe is not implemented"))
}

func (UnimplementedFrontendServiceHandler) GeneratePlan(context.Context, *connect.Request[_go.GeneratePlanRequest]) (*connect.Response[_go.GeneratePlanResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("frontendapi.FrontendService.GeneratePlan is not implemented"))
}

func (UnimplementedFrontendServiceHandler) GetPlans(context.Context, *connect.Request[_go.GetPlansRequest]) (*connect.Response[_go.GetPlansResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("frontendapi.FrontendService.GetPlans is not implemented"))
}

func (UnimplementedFrontendServiceHandler) GetPlan(context.Context, *connect.Request[_go.GetPlanRequest]) (*connect.Response[_go.GetPlanResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("frontendapi.FrontendService.GetPlan is not implemented"))
}

func (UnimplementedFrontendServiceHandler) AddBookmark(context.Context, *connect.Request[_go.AddBookmarkRequest]) (*connect.Response[_go.AddBookmarkResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("frontendapi.FrontendService.AddBookmark is not implemented"))
}

func (UnimplementedFrontendServiceHandler) RemoveBookmark(context.Context, *connect.Request[_go.RemoveBookmarkRequest]) (*connect.Response[_go.RemoveBookmarkResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("frontendapi.FrontendService.RemoveBookmark is not implemented"))
}
