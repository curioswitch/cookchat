// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        (unknown)
// source: frontendapi/frontend.proto

package frontendapi

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Language int32

const (
	// Unknown language.
	Language_LANGUAGE_UNSPECIFIED Language = 0
	// English.
	Language_LANGUAGE_ENGLISH Language = 1
	// Japanese.
	Language_LANGUAGE_JAPANESE Language = 2
)

// Enum value maps for Language.
var (
	Language_name = map[int32]string{
		0: "LANGUAGE_UNSPECIFIED",
		1: "LANGUAGE_ENGLISH",
		2: "LANGUAGE_JAPANESE",
	}
	Language_value = map[string]int32{
		"LANGUAGE_UNSPECIFIED": 0,
		"LANGUAGE_ENGLISH":     1,
		"LANGUAGE_JAPANESE":    2,
	}
)

func (x Language) Enum() *Language {
	p := new(Language)
	*p = x
	return p
}

func (x Language) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Language) Descriptor() protoreflect.EnumDescriptor {
	return file_frontendapi_frontend_proto_enumTypes[0].Descriptor()
}

func (Language) Type() protoreflect.EnumType {
	return &file_frontendapi_frontend_proto_enumTypes[0]
}

func (x Language) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Language.Descriptor instead.
func (Language) EnumDescriptor() ([]byte, []int) {
	return file_frontendapi_frontend_proto_rawDescGZIP(), []int{0}
}

// The source of a recipe.
type RecipeSource int32

const (
	// Unknown source.
	RecipeSource_RECIPE_SOURCE_UNSPECIFIED RecipeSource = 0
	// Recipe from cookpad.
	RecipeSource_RECIPE_SOURCE_COOKPAD RecipeSource = 1
)

// Enum value maps for RecipeSource.
var (
	RecipeSource_name = map[int32]string{
		0: "RECIPE_SOURCE_UNSPECIFIED",
		1: "RECIPE_SOURCE_COOKPAD",
	}
	RecipeSource_value = map[string]int32{
		"RECIPE_SOURCE_UNSPECIFIED": 0,
		"RECIPE_SOURCE_COOKPAD":     1,
	}
)

func (x RecipeSource) Enum() *RecipeSource {
	p := new(RecipeSource)
	*p = x
	return p
}

func (x RecipeSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RecipeSource) Descriptor() protoreflect.EnumDescriptor {
	return file_frontendapi_frontend_proto_enumTypes[1].Descriptor()
}

func (RecipeSource) Type() protoreflect.EnumType {
	return &file_frontendapi_frontend_proto_enumTypes[1]
}

func (x RecipeSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RecipeSource.Descriptor instead.
func (RecipeSource) EnumDescriptor() ([]byte, []int) {
	return file_frontendapi_frontend_proto_rawDescGZIP(), []int{1}
}

type StartChatRequest_ModelProvider int32

const (
	// The default model.
	StartChatRequest_MODEL_PROVIDER_UNSPECIFIED StartChatRequest_ModelProvider = 0
	// Google GenAI model.
	StartChatRequest_MODEL_PROVIDER_GOOGLE_GENAI StartChatRequest_ModelProvider = 1
	// OpenAI model.
	StartChatRequest_MODEL_PROVIDER_OPENAI StartChatRequest_ModelProvider = 2
)

// Enum value maps for StartChatRequest_ModelProvider.
var (
	StartChatRequest_ModelProvider_name = map[int32]string{
		0: "MODEL_PROVIDER_UNSPECIFIED",
		1: "MODEL_PROVIDER_GOOGLE_GENAI",
		2: "MODEL_PROVIDER_OPENAI",
	}
	StartChatRequest_ModelProvider_value = map[string]int32{
		"MODEL_PROVIDER_UNSPECIFIED":  0,
		"MODEL_PROVIDER_GOOGLE_GENAI": 1,
		"MODEL_PROVIDER_OPENAI":       2,
	}
)

func (x StartChatRequest_ModelProvider) Enum() *StartChatRequest_ModelProvider {
	p := new(StartChatRequest_ModelProvider)
	*p = x
	return p
}

func (x StartChatRequest_ModelProvider) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StartChatRequest_ModelProvider) Descriptor() protoreflect.EnumDescriptor {
	return file_frontendapi_frontend_proto_enumTypes[2].Descriptor()
}

func (StartChatRequest_ModelProvider) Type() protoreflect.EnumType {
	return &file_frontendapi_frontend_proto_enumTypes[2]
}

func (x StartChatRequest_ModelProvider) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StartChatRequest_ModelProvider.Descriptor instead.
func (StartChatRequest_ModelProvider) EnumDescriptor() ([]byte, []int) {
	return file_frontendapi_frontend_proto_rawDescGZIP(), []int{13, 0}
}

// The content of a chat message.
type ChatContent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Payload:
	//
	//	*ChatContent_Message
	//	*ChatContent_Audio
	Payload       isChatContent_Payload `protobuf_oneof:"payload"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChatContent) Reset() {
	*x = ChatContent{}
	mi := &file_frontendapi_frontend_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatContent) ProtoMessage() {}

func (x *ChatContent) ProtoReflect() protoreflect.Message {
	mi := &file_frontendapi_frontend_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatContent.ProtoReflect.Descriptor instead.
func (*ChatContent) Descriptor() ([]byte, []int) {
	return file_frontendapi_frontend_proto_rawDescGZIP(), []int{0}
}

func (x *ChatContent) GetPayload() isChatContent_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *ChatContent) GetMessage() string {
	if x != nil {
		if x, ok := x.Payload.(*ChatContent_Message); ok {
			return x.Message
		}
	}
	return ""
}

func (x *ChatContent) GetAudio() []byte {
	if x != nil {
		if x, ok := x.Payload.(*ChatContent_Audio); ok {
			return x.Audio
		}
	}
	return nil
}

type isChatContent_Payload interface {
	isChatContent_Payload()
}

type ChatContent_Message struct {
	// A text message.
	Message string `protobuf:"bytes,1,opt,name=message,proto3,oneof"`
}

type ChatContent_Audio struct {
	// An audio message.
	Audio []byte `protobuf:"bytes,2,opt,name=audio,proto3,oneof"`
}

func (*ChatContent_Message) isChatContent_Payload() {}

func (*ChatContent_Audio) isChatContent_Payload() {}

// A request to send in a chat.
type ChatRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The content of the chat message.
	Content *ChatContent `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	// The recipe to chat about.
	//
	// Types that are valid to be assigned to Recipe:
	//
	//	*ChatRequest_RecipeText
	//	*ChatRequest_RecipeId
	Recipe        isChatRequest_Recipe `protobuf_oneof:"recipe"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChatRequest) Reset() {
	*x = ChatRequest{}
	mi := &file_frontendapi_frontend_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatRequest) ProtoMessage() {}

func (x *ChatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontendapi_frontend_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatRequest.ProtoReflect.Descriptor instead.
func (*ChatRequest) Descriptor() ([]byte, []int) {
	return file_frontendapi_frontend_proto_rawDescGZIP(), []int{1}
}

func (x *ChatRequest) GetContent() *ChatContent {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *ChatRequest) GetRecipe() isChatRequest_Recipe {
	if x != nil {
		return x.Recipe
	}
	return nil
}

func (x *ChatRequest) GetRecipeText() string {
	if x != nil {
		if x, ok := x.Recipe.(*ChatRequest_RecipeText); ok {
			return x.RecipeText
		}
	}
	return ""
}

func (x *ChatRequest) GetRecipeId() string {
	if x != nil {
		if x, ok := x.Recipe.(*ChatRequest_RecipeId); ok {
			return x.RecipeId
		}
	}
	return ""
}

type isChatRequest_Recipe interface {
	isChatRequest_Recipe()
}

type ChatRequest_RecipeText struct {
	// Free-form text of the recipe.
	RecipeText string `protobuf:"bytes,2,opt,name=recipe_text,json=recipeText,proto3,oneof"`
}

type ChatRequest_RecipeId struct {
	// The ID of a cookchat recipe.
	RecipeId string `protobuf:"bytes,3,opt,name=recipe_id,json=recipeId,proto3,oneof"`
}

func (*ChatRequest_RecipeText) isChatRequest_Recipe() {}

func (*ChatRequest_RecipeId) isChatRequest_Recipe() {}

// A response in a chat.
type ChatResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The content of the chat message.
	Content       *ChatContent `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChatResponse) Reset() {
	*x = ChatResponse{}
	mi := &file_frontendapi_frontend_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatResponse) ProtoMessage() {}

func (x *ChatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_frontendapi_frontend_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatResponse.ProtoReflect.Descriptor instead.
func (*ChatResponse) Descriptor() ([]byte, []int) {
	return file_frontendapi_frontend_proto_rawDescGZIP(), []int{2}
}

func (x *ChatResponse) GetContent() *ChatContent {
	if x != nil {
		return x.Content
	}
	return nil
}

// An ingredient in a recipe.
type RecipeIngredient struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the ingredient.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The quantity of the ingredient as free-form text.
	Quantity      string `protobuf:"bytes,2,opt,name=quantity,proto3" json:"quantity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecipeIngredient) Reset() {
	*x = RecipeIngredient{}
	mi := &file_frontendapi_frontend_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecipeIngredient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipeIngredient) ProtoMessage() {}

func (x *RecipeIngredient) ProtoReflect() protoreflect.Message {
	mi := &file_frontendapi_frontend_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipeIngredient.ProtoReflect.Descriptor instead.
func (*RecipeIngredient) Descriptor() ([]byte, []int) {
	return file_frontendapi_frontend_proto_rawDescGZIP(), []int{3}
}

func (x *RecipeIngredient) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RecipeIngredient) GetQuantity() string {
	if x != nil {
		return x.Quantity
	}
	return ""
}

// A step in a recipe.
type RecipeStep struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The description of the step.
	Description string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	// An image for the step.
	ImageUrl      string `protobuf:"bytes,2,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecipeStep) Reset() {
	*x = RecipeStep{}
	mi := &file_frontendapi_frontend_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecipeStep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipeStep) ProtoMessage() {}

func (x *RecipeStep) ProtoReflect() protoreflect.Message {
	mi := &file_frontendapi_frontend_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipeStep.ProtoReflect.Descriptor instead.
func (*RecipeStep) Descriptor() ([]byte, []int) {
	return file_frontendapi_frontend_proto_rawDescGZIP(), []int{4}
}

func (x *RecipeStep) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *RecipeStep) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

// A section of ingredients in a recipe.
type IngredientSection struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The title of the ingredient section.
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// The ingredients in the section.
	Ingredients   []*RecipeIngredient `protobuf:"bytes,2,rep,name=ingredients,proto3" json:"ingredients,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IngredientSection) Reset() {
	*x = IngredientSection{}
	mi := &file_frontendapi_frontend_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IngredientSection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngredientSection) ProtoMessage() {}

func (x *IngredientSection) ProtoReflect() protoreflect.Message {
	mi := &file_frontendapi_frontend_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngredientSection.ProtoReflect.Descriptor instead.
func (*IngredientSection) Descriptor() ([]byte, []int) {
	return file_frontendapi_frontend_proto_rawDescGZIP(), []int{5}
}

func (x *IngredientSection) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *IngredientSection) GetIngredients() []*RecipeIngredient {
	if x != nil {
		return x.Ingredients
	}
	return nil
}

// Full details of a recipe.
type Recipe struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The unique identifier of the recipe within cookchat.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The source of the recipe.
	Source RecipeSource `protobuf:"varint,2,opt,name=source,proto3,enum=frontendapi.RecipeSource" json:"source,omitempty"`
	// The title of the recipe.
	Title string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	// The URL for the main image of the recipe.
	ImageUrl string `protobuf:"bytes,4,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`
	// The description of the recipe.
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// The main ingredients of the recipe.
	Ingredients []*RecipeIngredient `protobuf:"bytes,6,rep,name=ingredients,proto3" json:"ingredients,omitempty"`
	// Additional ingredients grouped into sections.
	AdditionalIngredients []*IngredientSection `protobuf:"bytes,7,rep,name=additional_ingredients,json=additionalIngredients,proto3" json:"additional_ingredients,omitempty"`
	// The steps to prepare the recipe.
	Steps []*RecipeStep `protobuf:"bytes,8,rep,name=steps,proto3" json:"steps,omitempty"`
	// Additional notes or comments about the recipe.
	Notes string `protobuf:"bytes,9,opt,name=notes,proto3" json:"notes,omitempty"`
	// The serving size of the recipe as free-form text.
	ServingSize string `protobuf:"bytes,10,opt,name=serving_size,json=servingSize,proto3" json:"serving_size,omitempty"`
	// The language of the recipe.
	Language      Language `protobuf:"varint,11,opt,name=language,proto3,enum=frontendapi.Language" json:"language,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Recipe) Reset() {
	*x = Recipe{}
	mi := &file_frontendapi_frontend_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Recipe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Recipe) ProtoMessage() {}

func (x *Recipe) ProtoReflect() protoreflect.Message {
	mi := &file_frontendapi_frontend_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Recipe.ProtoReflect.Descriptor instead.
func (*Recipe) Descriptor() ([]byte, []int) {
	return file_frontendapi_frontend_proto_rawDescGZIP(), []int{6}
}

func (x *Recipe) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Recipe) GetSource() RecipeSource {
	if x != nil {
		return x.Source
	}
	return RecipeSource_RECIPE_SOURCE_UNSPECIFIED
}

func (x *Recipe) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Recipe) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *Recipe) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Recipe) GetIngredients() []*RecipeIngredient {
	if x != nil {
		return x.Ingredients
	}
	return nil
}

func (x *Recipe) GetAdditionalIngredients() []*IngredientSection {
	if x != nil {
		return x.AdditionalIngredients
	}
	return nil
}

func (x *Recipe) GetSteps() []*RecipeStep {
	if x != nil {
		return x.Steps
	}
	return nil
}

func (x *Recipe) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *Recipe) GetServingSize() string {
	if x != nil {
		return x.ServingSize
	}
	return ""
}

func (x *Recipe) GetLanguage() Language {
	if x != nil {
		return x.Language
	}
	return Language_LANGUAGE_UNSPECIFIED
}

// A request for FrontendService.GetRecipe.
type GetRecipeRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ID of the recipe to get.
	RecipeId      string `protobuf:"bytes,1,opt,name=recipe_id,json=recipeId,proto3" json:"recipe_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRecipeRequest) Reset() {
	*x = GetRecipeRequest{}
	mi := &file_frontendapi_frontend_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRecipeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecipeRequest) ProtoMessage() {}

func (x *GetRecipeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontendapi_frontend_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecipeRequest.ProtoReflect.Descriptor instead.
func (*GetRecipeRequest) Descriptor() ([]byte, []int) {
	return file_frontendapi_frontend_proto_rawDescGZIP(), []int{7}
}

func (x *GetRecipeRequest) GetRecipeId() string {
	if x != nil {
		return x.RecipeId
	}
	return ""
}

// A response for FrontendService.GetRecipe.
type GetRecipeResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The requested recipe.
	Recipe        *Recipe `protobuf:"bytes,1,opt,name=recipe,proto3" json:"recipe,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRecipeResponse) Reset() {
	*x = GetRecipeResponse{}
	mi := &file_frontendapi_frontend_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRecipeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecipeResponse) ProtoMessage() {}

func (x *GetRecipeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_frontendapi_frontend_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecipeResponse.ProtoReflect.Descriptor instead.
func (*GetRecipeResponse) Descriptor() ([]byte, []int) {
	return file_frontendapi_frontend_proto_rawDescGZIP(), []int{8}
}

func (x *GetRecipeResponse) GetRecipe() *Recipe {
	if x != nil {
		return x.Recipe
	}
	return nil
}

// A token returned to retrieve a subsequent page of items.
type Pagination struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LastId        string                 `protobuf:"bytes,1,opt,name=last_id,json=lastId,proto3" json:"last_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Pagination) Reset() {
	*x = Pagination{}
	mi := &file_frontendapi_frontend_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Pagination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pagination) ProtoMessage() {}

func (x *Pagination) ProtoReflect() protoreflect.Message {
	mi := &file_frontendapi_frontend_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pagination.ProtoReflect.Descriptor instead.
func (*Pagination) Descriptor() ([]byte, []int) {
	return file_frontendapi_frontend_proto_rawDescGZIP(), []int{9}
}

func (x *Pagination) GetLastId() string {
	if x != nil {
		return x.LastId
	}
	return ""
}

// A snippet of a recipe for list views.
type RecipeSnippet struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ID of the recipe.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The title of the recipe.
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// The summary of the recipe.
	Summary string `protobuf:"bytes,3,opt,name=summary,proto3" json:"summary,omitempty"`
	// The image URL of the recipe.
	ImageUrl      string `protobuf:"bytes,4,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecipeSnippet) Reset() {
	*x = RecipeSnippet{}
	mi := &file_frontendapi_frontend_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecipeSnippet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipeSnippet) ProtoMessage() {}

func (x *RecipeSnippet) ProtoReflect() protoreflect.Message {
	mi := &file_frontendapi_frontend_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipeSnippet.ProtoReflect.Descriptor instead.
func (*RecipeSnippet) Descriptor() ([]byte, []int) {
	return file_frontendapi_frontend_proto_rawDescGZIP(), []int{10}
}

func (x *RecipeSnippet) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RecipeSnippet) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *RecipeSnippet) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *RecipeSnippet) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

// A request for FrontendService.ListRecipes.
type ListRecipesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A text query to filter by.
	Query string `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	// The pagination token for the next page of recipes.
	// If unset, the first page is returned.
	Pagination    *Pagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListRecipesRequest) Reset() {
	*x = ListRecipesRequest{}
	mi := &file_frontendapi_frontend_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRecipesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRecipesRequest) ProtoMessage() {}

func (x *ListRecipesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontendapi_frontend_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRecipesRequest.ProtoReflect.Descriptor instead.
func (*ListRecipesRequest) Descriptor() ([]byte, []int) {
	return file_frontendapi_frontend_proto_rawDescGZIP(), []int{11}
}

func (x *ListRecipesRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *ListRecipesRequest) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// A response for FrontendService.ListRecipes.
type ListRecipesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The recipes.
	Recipes []*RecipeSnippet `protobuf:"bytes,1,rep,name=recipes,proto3" json:"recipes,omitempty"`
	// The pagination token for the next page of recipes.
	Pagination    *Pagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListRecipesResponse) Reset() {
	*x = ListRecipesResponse{}
	mi := &file_frontendapi_frontend_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRecipesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRecipesResponse) ProtoMessage() {}

func (x *ListRecipesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_frontendapi_frontend_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRecipesResponse.ProtoReflect.Descriptor instead.
func (*ListRecipesResponse) Descriptor() ([]byte, []int) {
	return file_frontendapi_frontend_proto_rawDescGZIP(), []int{12}
}

func (x *ListRecipesResponse) GetRecipes() []*RecipeSnippet {
	if x != nil {
		return x.Recipes
	}
	return nil
}

func (x *ListRecipesResponse) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// A request to start a chat session.
type StartChatRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The recipe to chat about.
	//
	// Types that are valid to be assigned to Recipe:
	//
	//	*StartChatRequest_RecipeText
	//	*StartChatRequest_RecipeId
	Recipe isStartChatRequest_Recipe `protobuf_oneof:"recipe"`
	// The model provider to use for the chat.
	ModelProvider StartChatRequest_ModelProvider `protobuf:"varint,4,opt,name=model_provider,json=modelProvider,proto3,enum=frontendapi.StartChatRequest_ModelProvider" json:"model_provider,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartChatRequest) Reset() {
	*x = StartChatRequest{}
	mi := &file_frontendapi_frontend_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartChatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartChatRequest) ProtoMessage() {}

func (x *StartChatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontendapi_frontend_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartChatRequest.ProtoReflect.Descriptor instead.
func (*StartChatRequest) Descriptor() ([]byte, []int) {
	return file_frontendapi_frontend_proto_rawDescGZIP(), []int{13}
}

func (x *StartChatRequest) GetRecipe() isStartChatRequest_Recipe {
	if x != nil {
		return x.Recipe
	}
	return nil
}

func (x *StartChatRequest) GetRecipeText() string {
	if x != nil {
		if x, ok := x.Recipe.(*StartChatRequest_RecipeText); ok {
			return x.RecipeText
		}
	}
	return ""
}

func (x *StartChatRequest) GetRecipeId() string {
	if x != nil {
		if x, ok := x.Recipe.(*StartChatRequest_RecipeId); ok {
			return x.RecipeId
		}
	}
	return ""
}

func (x *StartChatRequest) GetModelProvider() StartChatRequest_ModelProvider {
	if x != nil {
		return x.ModelProvider
	}
	return StartChatRequest_MODEL_PROVIDER_UNSPECIFIED
}

type isStartChatRequest_Recipe interface {
	isStartChatRequest_Recipe()
}

type StartChatRequest_RecipeText struct {
	// Free-form text of the recipe.
	RecipeText string `protobuf:"bytes,2,opt,name=recipe_text,json=recipeText,proto3,oneof"`
}

type StartChatRequest_RecipeId struct {
	// The ID of a cookchat recipe.
	RecipeId string `protobuf:"bytes,3,opt,name=recipe_id,json=recipeId,proto3,oneof"`
}

func (*StartChatRequest_RecipeText) isStartChatRequest_Recipe() {}

func (*StartChatRequest_RecipeId) isStartChatRequest_Recipe() {}

// A response to start a chat session.
type StartChatResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ephemeral API key to use to start the chat.
	ChatApiKey string `protobuf:"bytes,1,opt,name=chat_api_key,json=chatApiKey,proto3" json:"chat_api_key,omitempty"`
	// The chat model to use for the session.
	ChatModel string `protobuf:"bytes,2,opt,name=chat_model,json=chatModel,proto3" json:"chat_model,omitempty"`
	// Instructions for the chat session.
	ChatInstructions string `protobuf:"bytes,3,opt,name=chat_instructions,json=chatInstructions,proto3" json:"chat_instructions,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *StartChatResponse) Reset() {
	*x = StartChatResponse{}
	mi := &file_frontendapi_frontend_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartChatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartChatResponse) ProtoMessage() {}

func (x *StartChatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_frontendapi_frontend_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartChatResponse.ProtoReflect.Descriptor instead.
func (*StartChatResponse) Descriptor() ([]byte, []int) {
	return file_frontendapi_frontend_proto_rawDescGZIP(), []int{14}
}

func (x *StartChatResponse) GetChatApiKey() string {
	if x != nil {
		return x.ChatApiKey
	}
	return ""
}

func (x *StartChatResponse) GetChatModel() string {
	if x != nil {
		return x.ChatModel
	}
	return ""
}

func (x *StartChatResponse) GetChatInstructions() string {
	if x != nil {
		return x.ChatInstructions
	}
	return ""
}

var File_frontendapi_frontend_proto protoreflect.FileDescriptor

var file_frontendapi_frontend_proto_rawDesc = string([]byte{
	0x0a, 0x1a, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x72,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x66, 0x72,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x70, 0x69, 0x22, 0x4c, 0x0a, 0x0b, 0x43, 0x68, 0x61,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x42, 0x09, 0x0a, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x8d, 0x01, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0b, 0x72,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1d,
	0x0a, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x64, 0x42, 0x08, 0x0a,
	0x06, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x22, 0x42, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x42, 0x0a, 0x10, 0x52,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22,
	0x4b, 0x0a, 0x0a, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x22, 0x6a, 0x0a, 0x11,
	0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x3f, 0x0a, 0x0b, 0x69, 0x6e, 0x67, 0x72, 0x65,
	0x64, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x66,
	0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70,
	0x65, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x69, 0x6e, 0x67,
	0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xd3, 0x03, 0x0a, 0x06, 0x52, 0x65, 0x63,
	0x69, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x70,
	0x69, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0b, 0x69,
	0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x52,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x52,
	0x0b, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x55, 0x0a, 0x16,
	0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x67, 0x72, 0x65,
	0x64, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66,
	0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65,
	0x64, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x15, 0x61, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x2d, 0x0a, 0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x70, 0x69,
	0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x52, 0x05, 0x73, 0x74, 0x65,
	0x70, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x6e, 0x67, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e,
	0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0x2f,
	0x0a, 0x10, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x64, 0x22,
	0x40, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x61,
	0x70, 0x69, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x06, 0x72, 0x65, 0x63, 0x69, 0x70,
	0x65, 0x22, 0x25, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x17, 0x0a, 0x07, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6c, 0x61, 0x73, 0x74, 0x49, 0x64, 0x22, 0x6c, 0x0a, 0x0d, 0x52, 0x65, 0x63, 0x69,
	0x70, 0x65, 0x53, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x22, 0x63, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x37, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x64, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x84, 0x01, 0x0a, 0x13,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x61,
	0x70, 0x69, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74,
	0x52, 0x07, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x9f, 0x02, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x68, 0x61, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x69, 0x70,
	0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a,
	0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x72, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x64, 0x12, 0x52, 0x0a, 0x0e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2b, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x70, 0x69, 0x2e,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x0d,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22, 0x6b, 0x0a,
	0x0d, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x1e,
	0x0a, 0x1a, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1f,
	0x0a, 0x1b, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52,
	0x5f, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x5f, 0x47, 0x45, 0x4e, 0x41, 0x49, 0x10, 0x01, 0x12,
	0x19, 0x0a, 0x15, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45,
	0x52, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x41, 0x49, 0x10, 0x02, 0x42, 0x08, 0x0a, 0x06, 0x72, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x68,
	0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x63, 0x68,
	0x61, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x68, 0x61, 0x74, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x68, 0x61, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x68, 0x61, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x2b, 0x0a, 0x11, 0x63,
	0x68, 0x61, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2a, 0x51, 0x0a, 0x08, 0x4c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14,
	0x0a, 0x10, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x45, 0x4e, 0x47, 0x4c, 0x49,
	0x53, 0x48, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45,
	0x5f, 0x4a, 0x41, 0x50, 0x41, 0x4e, 0x45, 0x53, 0x45, 0x10, 0x02, 0x2a, 0x48, 0x0a, 0x0c, 0x52,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x52,
	0x45, 0x43, 0x49, 0x50, 0x45, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45,
	0x43, 0x49, 0x50, 0x45, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4f, 0x4b,
	0x50, 0x41, 0x44, 0x10, 0x01, 0x32, 0x4e, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x3f, 0x0a, 0x04, 0x43, 0x68, 0x61, 0x74, 0x12, 0x18, 0x2e, 0x66,
	0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x64, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x28, 0x01, 0x30, 0x01, 0x32, 0xfb, 0x01, 0x0a, 0x0f, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4a, 0x0a, 0x09, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x12, 0x1d, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x64, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64,
	0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x63,
	0x69, 0x70, 0x65, 0x73, 0x12, 0x1f, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x61,
	0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64,
	0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x43, 0x68, 0x61, 0x74, 0x12, 0x1d, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x61,
	0x70, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x70,
	0x69, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x42, 0x3d, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x63, 0x75, 0x72, 0x69, 0x6f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2f, 0x63, 0x6f,
	0x6f, 0x6b, 0x63, 0x68, 0x61, 0x74, 0x2f, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x67, 0x6f, 0x3b, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x61,
	0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_frontendapi_frontend_proto_rawDescOnce sync.Once
	file_frontendapi_frontend_proto_rawDescData []byte
)

func file_frontendapi_frontend_proto_rawDescGZIP() []byte {
	file_frontendapi_frontend_proto_rawDescOnce.Do(func() {
		file_frontendapi_frontend_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_frontendapi_frontend_proto_rawDesc), len(file_frontendapi_frontend_proto_rawDesc)))
	})
	return file_frontendapi_frontend_proto_rawDescData
}

var file_frontendapi_frontend_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_frontendapi_frontend_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_frontendapi_frontend_proto_goTypes = []any{
	(Language)(0),                       // 0: frontendapi.Language
	(RecipeSource)(0),                   // 1: frontendapi.RecipeSource
	(StartChatRequest_ModelProvider)(0), // 2: frontendapi.StartChatRequest.ModelProvider
	(*ChatContent)(nil),                 // 3: frontendapi.ChatContent
	(*ChatRequest)(nil),                 // 4: frontendapi.ChatRequest
	(*ChatResponse)(nil),                // 5: frontendapi.ChatResponse
	(*RecipeIngredient)(nil),            // 6: frontendapi.RecipeIngredient
	(*RecipeStep)(nil),                  // 7: frontendapi.RecipeStep
	(*IngredientSection)(nil),           // 8: frontendapi.IngredientSection
	(*Recipe)(nil),                      // 9: frontendapi.Recipe
	(*GetRecipeRequest)(nil),            // 10: frontendapi.GetRecipeRequest
	(*GetRecipeResponse)(nil),           // 11: frontendapi.GetRecipeResponse
	(*Pagination)(nil),                  // 12: frontendapi.Pagination
	(*RecipeSnippet)(nil),               // 13: frontendapi.RecipeSnippet
	(*ListRecipesRequest)(nil),          // 14: frontendapi.ListRecipesRequest
	(*ListRecipesResponse)(nil),         // 15: frontendapi.ListRecipesResponse
	(*StartChatRequest)(nil),            // 16: frontendapi.StartChatRequest
	(*StartChatResponse)(nil),           // 17: frontendapi.StartChatResponse
}
var file_frontendapi_frontend_proto_depIdxs = []int32{
	3,  // 0: frontendapi.ChatRequest.content:type_name -> frontendapi.ChatContent
	3,  // 1: frontendapi.ChatResponse.content:type_name -> frontendapi.ChatContent
	6,  // 2: frontendapi.IngredientSection.ingredients:type_name -> frontendapi.RecipeIngredient
	1,  // 3: frontendapi.Recipe.source:type_name -> frontendapi.RecipeSource
	6,  // 4: frontendapi.Recipe.ingredients:type_name -> frontendapi.RecipeIngredient
	8,  // 5: frontendapi.Recipe.additional_ingredients:type_name -> frontendapi.IngredientSection
	7,  // 6: frontendapi.Recipe.steps:type_name -> frontendapi.RecipeStep
	0,  // 7: frontendapi.Recipe.language:type_name -> frontendapi.Language
	9,  // 8: frontendapi.GetRecipeResponse.recipe:type_name -> frontendapi.Recipe
	12, // 9: frontendapi.ListRecipesRequest.pagination:type_name -> frontendapi.Pagination
	13, // 10: frontendapi.ListRecipesResponse.recipes:type_name -> frontendapi.RecipeSnippet
	12, // 11: frontendapi.ListRecipesResponse.pagination:type_name -> frontendapi.Pagination
	2,  // 12: frontendapi.StartChatRequest.model_provider:type_name -> frontendapi.StartChatRequest.ModelProvider
	4,  // 13: frontendapi.ChatService.Chat:input_type -> frontendapi.ChatRequest
	10, // 14: frontendapi.FrontendService.GetRecipe:input_type -> frontendapi.GetRecipeRequest
	14, // 15: frontendapi.FrontendService.ListRecipes:input_type -> frontendapi.ListRecipesRequest
	16, // 16: frontendapi.FrontendService.StartChat:input_type -> frontendapi.StartChatRequest
	5,  // 17: frontendapi.ChatService.Chat:output_type -> frontendapi.ChatResponse
	11, // 18: frontendapi.FrontendService.GetRecipe:output_type -> frontendapi.GetRecipeResponse
	15, // 19: frontendapi.FrontendService.ListRecipes:output_type -> frontendapi.ListRecipesResponse
	17, // 20: frontendapi.FrontendService.StartChat:output_type -> frontendapi.StartChatResponse
	17, // [17:21] is the sub-list for method output_type
	13, // [13:17] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_frontendapi_frontend_proto_init() }
func file_frontendapi_frontend_proto_init() {
	if File_frontendapi_frontend_proto != nil {
		return
	}
	file_frontendapi_frontend_proto_msgTypes[0].OneofWrappers = []any{
		(*ChatContent_Message)(nil),
		(*ChatContent_Audio)(nil),
	}
	file_frontendapi_frontend_proto_msgTypes[1].OneofWrappers = []any{
		(*ChatRequest_RecipeText)(nil),
		(*ChatRequest_RecipeId)(nil),
	}
	file_frontendapi_frontend_proto_msgTypes[13].OneofWrappers = []any{
		(*StartChatRequest_RecipeText)(nil),
		(*StartChatRequest_RecipeId)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_frontendapi_frontend_proto_rawDesc), len(file_frontendapi_frontend_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_frontendapi_frontend_proto_goTypes,
		DependencyIndexes: file_frontendapi_frontend_proto_depIdxs,
		EnumInfos:         file_frontendapi_frontend_proto_enumTypes,
		MessageInfos:      file_frontendapi_frontend_proto_msgTypes,
	}.Build()
	File_frontendapi_frontend_proto = out.File
	file_frontendapi_frontend_proto_goTypes = nil
	file_frontendapi_frontend_proto_depIdxs = nil
}
